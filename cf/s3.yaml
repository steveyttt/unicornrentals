---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Creates a static website using S3 for the Wild Rydes serverless web application workshop

Parameters:

  BucketName:
    Type: String
    Description: The name for the bucket hosting your website, e.g. 'wildrydes-yourname'

  CodeBucket:
    Type: String
    Default: wildrydes-ap-southeast-2
    Description: S3 bucket containing the code deployed by this template

  CodeKeyPrefix:
    Type: String
    Default: WebApplication/1_StaticWebHosting
    Description: Key prefix for resources referenced from the CodeBucket

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Website Configuration"
        Parameters:
          - BucketName
      -
        Label:
          default: "Advanced Configuration"
        Parameters:
          - CodeBucket
          - CodeKeyPrefix
    ParameterLabels:
      BucketName:
        default: "Website Bucket Name"

Resources:

  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html

  WebsiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  WebsiteContent:
    Type: "Custom::S3Objects"
    Properties:
      ServiceToken: !GetAtt CopyS3ObjectsFunction.Arn
      SourceBucket: !Ref CodeBucket
      SourcePrefix: !Sub "${CodeKeyPrefix}/"
      Bucket: !Ref WebsiteBucket

  S3CopyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /wildrydes/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AllowLogging
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              -
                Sid: SourceBucketReadAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::${CodeBucket}"
                  - !Sub "arn:aws:s3:::${CodeBucket}/${CodeKeyPrefix}/*"
              -
                Sid: DestBucketWriteAccess
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:PutObjectVersionAcl"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:CopyObject"
                Resource:
                  - !Sub "arn:aws:s3:::${WebsiteBucket}"
                  - !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  CopyS3ObjectsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: s3copy
      Runtime: go1.x
      Role: !GetAtt S3CopyRole.Arn
      Timeout: 120
      Code:
        S3Bucket: lambda-849375858678
        S3Key: s3copy.zip


Outputs:
  WebsiteURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
